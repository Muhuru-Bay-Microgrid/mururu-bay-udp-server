import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:1.10.0'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'os-package'


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += "-parameters"
}

repositories {
    mavenCentral()
}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def buildTime() {
    def df = new SimpleDateFormat("yyyyMMddHHmm")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

ext {
    versionMajor = 1
    versionMinor = 0
    versionPatch = 0
    versionBuild = buildTime() // if you want build timestamp qualifiers
    //versionBuild = gitSha() // or you can use the gitSha() if traceability to a commit is more important
    project.version = "${versionMajor}.${versionMinor}.${versionPatch}.v${versionBuild}"

    distSpec = copySpec {
        into("conf") {
            from "src/main/conf"
        }
        into("bin") {
            from "src/main/bin"
        }
        into("lib") {
            from "src/main/lib"
            from "build/libs"
        }
    }
}


mainClassName = "org.mbmg.udp.server.Server"

jar {
    from {
         configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } 
    manifest {
        attributes("Main-Class":"org.mbmg.udp.server.Server")
    }
}

dependencies {
    compile 'io.netty:netty-all:4.0.19.Final'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'ch.qos.logback:logback-core:1.1.2'

    /**
     * Mandatory dependencies for using Spock test framework
     */
    testCompile 'org.codehaus.groovy:groovy-all:2.2.2'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    /**
     * Optional dependencies for using Spock
     */
    testCompile 'org.hamcrest:hamcrest-core:1.2'
    testRuntime 'cglib:cglib-nodep:2.2'

}

task wrapper(type: Wrapper) {
    gradleVersion = '1.4'
}


task distBin(type: Zip, dependsOn: [jar, assemble]) {
    appendix = 'binary'
    into("muhuru-bay-udp-server") {
        with distSpec
    }
}

ospackage {
    packageName = 'muhuru-bay-udp-server'
    version = "${versionMajor}.${versionMinor}.${versionPatch}"
    release = 1
    arch = I386
    os = LINUX

    preInstall file('scripts/rpm/preInstall.sh')
    postInstall file('scripts/rpm/postInstall.sh')
    preUninstall 'touch /tmp/myfile'
    postUninstall file('scripts/rpm/postUninstall.sh')

    requires('java')

    into '/opt/muhuru-bay-udp-server'

    from(jar.outputs.files) {
        into 'lib'
    }
    from('src/main/lib') {
        into 'lib'
    }
    from('scripts') {
        into 'bin'
        exclude 'database'
        fileMode = 0550
    }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }
    from('home') {
        // Creating directory entries (or not) in the RPM is normally left up to redline-rpm library.
        // Use this to explicitly create an entry -- for setting directory fileMode on system directories.
        createDirectoryEntry = true
        fileMode = 0500
        into 'home'
    }
    from('endorsed') {
        // Will tell redline-rpm not to auto create directories, which
        // is sometimes necessary to avoid rpm directory conflicts
        addParentDirs = false
        into '/usr/share/tomcat/endorsed'
    }

}

buildRpm {
    requires('bar', '2.2', GREATER | EQUAL)
    requires('baz', '1.0.1', LESS)
    link('/opt/foo/bin/foo.init', '/etc/init.d/foo')
}


